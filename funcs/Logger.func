#! /bin/bash

# Set LOG_LEVEL
declare -A _LOG_LEVEL
_LOG_LEVEL[DEBUG]=10
_LOG_LEVEL[INFO]=30
_LOG_LEVEL[WARN]=40
_LOG_LEVEL[ERROR]=50

_LOG_DIRECTORY=""

# Set LOG Output Temporally File
_tmpfile_StandardOutput_Error=`mktemp`

# Init LOG_LEVEL
function _Init_LOG_LEVEL() {
  if [ "${LOG_LEVEL}" != "" ];
  then
    LOG_LEVEL=${_LOG_LEVEL[${LOG_LEVEL}]}
  fi
  if [ "${LOG_LEVEL}" = "" ];
  then
    LOG_LEVEL=${_LOG_LEVEL[INFO]}
  fi
}

# Init LOG_DIRECTORY
function _Init_LOG_DIRECTORY() {
  #statements
  __PUTLOG DEBUG "_CONF_logDirPath [ ${_CONF_logDirPath} ] "
  if [ "${_CONF_logDirPath}" = "" ] ; then
    _LOG_DIRECTORY="${cCurrentPath}/logs"
  elif ! [ -e "${_CONF_logDirPath}" ]; then
    _LOG_DIRECTORY="${cCurrentPath}/logs"
  else
    _LOG_DIRECTORY="${_CONF_logDirPath}"
  fi
}

# Init LOG_FILE
function __Init_LOG_FILE() {
  #statements
  local cFilenameID="${1}"

  local _LogFileName_Trace="Trace_${cFilenameID}.log"

  #set Trace log
  exec 1>> ${_LOG_DIRECTORY}/${_LogFileName_Trace}

}

function __Export_ErrorLog() {
  #statements
  local cFilenameID="${1}"

  local _LogFileName_Error="Error_${cFilenameID}.log"

  cat ${_tmpfile_StandardOutput_Error} >> ${_LOG_DIRECTORY}/${_LogFileName_Error}
}

# START Error Logging
function _StartLogging() {
  #statements
  #set Error log
  exec 2>> ${_tmpfile_StandardOutput_Error}

}

#ã€€Initial setting
function _Logger_impl() {

  # Current Directory Path
  local cCurrentPath="${1}"

  # Read configuration file
  source ${cCurrentPath}/conf/Logger.conf

  # Init LOG_LEVEL
  _Init_LOG_LEVEL

  # Init LOG_DIRECTORY
  _Init_LOG_DIRECTORY

  # START Error Logging
  _StartLogging

}

function _MessageOutoput() {
  local target=${1};shift;
  local level=${1};shift;
  if [ ${_LOG_LEVEL[${level}]} -ge ${target} ];
  then
    printf "$(date +'%Y/%m/%d %T') %-5s ${$} ${@}\n" ${level}
  fi
}

function __PUTLOG() {
  local ARG_LEVEL="${1}"
  shift
  _MessageOutoput ${LOG_LEVEL} ${ARG_LEVEL} "${@}"
}


_Logger_impl "${1}"
